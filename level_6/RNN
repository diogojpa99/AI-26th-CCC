import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from tqdm import tqdm
from sklearn.naive_bayes import MultinomialNB, GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier

df =  pd.read_csv('training_data.csv', names=['dance', 'message'])
index=[]

for i in range(len(df['dance'])):
    count = len(df['dance'][i])
    if count !=30:
        index.append(i)

df.drop(index, inplace=True)

dic = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8}
names = ['dance', 'message']  
df_nr = pd.DataFrame(names)  

dance_numb=[]
for dance in df['dance']:
    aux = []
    for i in dance:
        aux.append(dic[i])
    dance_numb.append(aux)
data = pd.DataFrame(dance_numb)

x_train, x_test, y_train, y_test = train_test_split(df.iloc[:,0].values,
                                                    df.iloc[:,(len(df.columns)-1)].values,
                                                    test_size=0.1,shuffle=True)

'''model = keras.Sequential()
# Add an Embedding layer expecting input vocab of size 1000, and
# output embedding dimension of size 64.
model.add(layers.Embedding(input_dim=100, output_dim=30))

# Add a LSTM layer with 128 internal units.
model.add(layers.LSTM(128))

# Add a Dense layer with 10 units.
model.add(layers.Dense(10))'''

model = keras.Sequential()
model.add(layers.Embedding(input_dim=30, output_dim=5))

# The output of GRU will be a 3D tensor of shape (batch_size, timesteps, 256)
model.add(layers.GRU(256, return_sequences=True))

# The output of SimpleRNN will be a 2D tensor of shape (batch_size, 128)
model.add(layers.SimpleRNN(128))

model.add(layers.Dense(1))

model.compile(optimizer='adam', loss='mse', metrics=['accuracy'])

model.fit(x_train,y_train)

y_pred = model.predict(x_test)

print(accuracy_score(y_test,y_pred))

